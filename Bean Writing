
## Bean Wiring 정의

- 객체가 자신의 일을 하기 위해서 다른 객체를직접 찾거나 생성할 필요가 없음
- 컨테이너가 협업할 객체를 직접 제공한다.
- 이러한 객체관의 연관관계 형성 작업이 종속객체 주입이고 이를 와이어링이라 한다.

- 참고용 자료
    
    실현자, 저글링하는사람
    
    경연무대의 클래스들
    
    시를 읇프면서 저글링하는사람
    

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c710e1e-9864-4740-82c9-8564c7f58a61/Untitled.png)

느슨한 결합

바꾸기 편하게 느슨한 결합을 위한 인터페이스를 끼워넣음

연습용 클래스

xml - 설정이 들어가 있는 파일

## Bean wiring

패키지는 큰거부터 작은것으로 만듬

- 패키지 이름은 wiring.bean (반대로 작성)

## 메인 클래스

- BeanWiringTest.java
    
    ```java
    package wiring.bean;
    
    public class BeanWiringTest {
    	// 실행을 하려는 클래스
    	// 매인이 있어야함
    	public static void main(String[] args) throws PerformanceException{
    		// applicationcontext.xml 파일이 필요함
    		// applicationcontext.xml 을 패키지에 넣어줌
    		// Performer 인터페이스를 생성할것(패키지 안)
    		
    		
    		// 강한결합 - 바꿀 수 없는 결합
    		Juggler kim = new Juggler(); //생성자가 default라 값넣지말자
    		kim.perform(); // 예외를 던져줘야함
    	}
    }
    ```
    
- ApplicationContext.xml
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:p="http://www.springframework.org/schema/p"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">		
    	
    		
    </beans>
    ```
    
- interface
- Performer
    
    ```java
    package wiring.bean;
    
    public interface Performer {
    	// 상속 받아서 재정의 해서 사용
    	public void perform() throws PerformanceException; // 예외 클래스가 없기때문에 그냥 정의함, 예외 클래스 생성해줘야함
    }
    ```
    
- PerformanceException.java
    
    ```java
    package wiring.bean;
    
    public class PerformanceException extends Exception { //Exception 상속해줌
    	// 어떤 예외가 나올지 모르기에 처리해줌
    }
    ```
    
- 느슨한결합을위한 클래스 생성
- Juggler
    
    ```java
    package wiring.bean;
    
    public class Juggler implements Performer{ //Performer 상속
    	// 느슨한 결합을 위한 클래스 생성
    	
    	private int beanBags = 3; // 저글링할 공의 갯수
    	// 메서드 재정의
    	public void perform() throws PerformanceException {
    		
    		// 실제 공연을 하는 메서드
    		System.out.println(beanBags + "개를 저글링 합니다"); // beanBags라는 변수가 있어야함 (공의 갯수)
    	}
    }
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c5f85d33-932c-472a-b175-c99d43dfc7b8/Untitled.png)
    
    hong 추가후
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f50d8d20-ce4f-4893-a222-e9cb6b3f6eb4/Untitled.png)
    
    - ApplicationContext.xml
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <!-- 빈들(객체들) -->
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:p="http://www.springframework.org/schema/p"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">		
    	
    	
    	<!-- DI -->
    	<bean id="lee" class="wiring.bean.Juggler"/> <!-- 객체생성, 경로를 다 주어야함, bean에있는 Juggler에 Lee라고 만들겠다. -->
    		
    </beans>
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d0918c99-9cc1-4262-ab1e-33227b8778ab/Untitled.png)
    
    - BeanWiringTest.java
    
    ```java
    package wiring.bean;
    
    import org.springframework.context.ApplicationContext;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    
    public class BeanWiringTest {
    	// 실행을 하려는 클래스
    	// 매인이 있어야함
    	public static void main(String[] args) throws PerformanceException{
    		// applicationcontext.xml 파일이 필요함
    		// applicationcontext.xml 을 패키지에 넣어줌
    		// Performer 인터페이스를 생성할것(패키지 안)
    		
    		
    		// 강한결합 - 바꿀 수 없는 결합
    		Juggler kim = new Juggler(); //생성자가 default라 값넣지말자
    		kim.perform(); // 예외를 던져줘야함
    		
    		// 무대는 하나지만 공연자는 여러명이라 갈아끼울수 있도록
    		// 공연자들이 계속 바뀌어야함
    		// 참조변수도 juggler 인스턴스도 juggler이기에 갈아끼울 수없음
    		
    		// 해결을위해 느슨한결합을 해주어야함
    		// 느슨한결합 - 바꾸기 편하게 느슨한 결합을 위한 인터페이스를 끼워넣음
    		Performer hong = new Juggler(); // 계속 바꿀 수 있음 자식클레스에 아무거나 넣어도 됨
    		hong.perform();
    		// 무대 하나를 여러명이 돌려씀
    		// 자바로는 여기까지 밖에 못함
    		// 갈아끼울라면 자바소스를 코딩해서 건드려야함
    		// 갈아끼울 수 있긴하지만 코드를 수정해야해서 DI를 사용함
    		
    		// DI - 종속 객체 주입
    		// applicationCintext
    		// 객체 만드는 법이 달라짐
    		// 찾아서 써야함 - 컨테이너가 관리해줌
    		ApplicationContext ctx = new ClassPathXmlApplicationContext("/wiring/bean/ApplicationContext.xml"); 
    			// applicationcontext 객체 생성, new 해서 이렇게 생성
    			// 경로설정을 해줌
    			// /wiring/bean/ApplicationContext.xml 을 읽어와라 라는 뜻
    			// 에러가 없어야 제대로 작동
    		Performer lee = (Performer) ctx.getBean("lee"); // lee를 찾아씀, 형변환 해주어야함
    		lee.perform();
    		
    		
    	}
    }
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3dc11055-b0b6-461b-b3c9-2b073ab28f6f/Untitled.png)
    
    총 3개를 만들어 주었기 때문에 3번 출력되면 끝
    

---

## 생성자 와이어링

## 객체 주입

- 생성자를 이용한주입
    - 생성자를 이용하여 주머니의 갯수를 늘림

- 생성자를 만들어줌
- Juggler.java
    
    ```java
    package wiring.bean;
    
    public class Juggler implements Performer{ //Performer 상속
    	// 느슨한 결합을 위한 클래스 생성
    	
    	private int beanBags = 3; // 저글링할 공의 갯수
    	
    	// 디폴트 생성자가 없으면 에러가남
    	// 생성자를 만듬
    	public Juggler() {}
    
    	// 생성자 오버로딩
    	public Juggler(int beanBags) {
    		this.beanBags = beanBags;
    	}
    	
    	
    	
    	// 메서드 재정의
    	public void perform() throws PerformanceException {
    		// 실제 공연을 하는 메서드
    		System.out.println(beanBags + "개를 저글링 합니다"); // beanBags라는 변수가 있어야함 (공의 갯수)
    	}
    }
    ```
    
- applicationcontext.xml
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <!-- 빈들(객체들) -->
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:p="http://www.springframework.org/schema/p"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">		
    	
    	
    	<!-- DI -->
    	<bean id="lee" class="wiring.bean.Juggler"/> <!-- 객체생성, 경로를 다 주어야함, bean에있는 Juggler에 Lee라고 만들겠다. -->
    		
    	<!-- 생성자 wirring -->
    	<bean id="park" class="wiring.bean.Juggler">
    		<constructor-arg value="5"/> <!-- 생성자를 통해 value가 5로 들어감 -->
    	</bean>
    	
    </beans>
    ```
    

- BeanWiring.java
    
    ```java
    package wiring.bean;
    
    import org.springframework.context.ApplicationContext;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    
    public class BeanWiringTest {
    	// 실행을 하려는 클래스
    	// 매인이 있어야함
    	public static void main(String[] args) throws PerformanceException{
    		// applicationcontext.xml 파일이 필요함
    		// applicationcontext.xml 을 패키지에 넣어줌
    		// Performer 인터페이스를 생성할것(패키지 안)
    		
    		
    		// 강한결합 - 바꿀 수 없는 결합
    		Juggler kim = new Juggler(); //생성자가 default라 값넣지말자
    		kim.perform(); // 예외를 던져줘야함
    		
    		// 무대는 하나지만 공연자는 여러명이라 갈아끼울수 있도록
    		// 공연자들이 계속 바뀌어야함
    		// 참조변수도 juggler 인스턴스도 juggler이기에 갈아끼울 수없음
    		
    		// 해결을위해 느슨한결합을 해주어야함
    		// 느슨한결합 - 바꾸기 편하게 느슨한 결합을 위한 인터페이스를 끼워넣음
    		Performer hong = new Juggler(); // 계속 바꿀 수 있음 자식클레스에 아무거나 넣어도 됨
    		hong.perform();
    		// 무대 하나를 여러명이 돌려씀
    		// 자바로는 여기까지 밖에 못함
    		// 갈아끼울라면 자바소스를 코딩해서 건드려야함
    		// 갈아끼울 수 있긴하지만 코드를 수정해야해서 DI를 사용함
    		
    		// DI - 종속 객체 주입
    		// applicationCintext
    		// 객체 만드는 법이 달라짐
    		// 찾아서 써야함 - 컨테이너가 관리해줌
    		ApplicationContext ctx = new ClassPathXmlApplicationContext("/wiring/bean/ApplicationContext.xml"); 
    			// applicationcontext 객체 생성, new 해서 이렇게 생성
    			// 경로설정을 해줌
    			// /wiring/bean/ApplicationContext.xml 을 읽어와라 라는 뜻
    			// 에러가 없어야 제대로 작동
    		// Performer lee = (Performer) ctx.getBean("lee"); // lee를 찾아씀, 형변환 해주어야함
    		Performer lee = (Performer) ctx.getBean("park"); // applicationcontext에서 만든 생성자에서 5를 받아옴
    		lee.perform();
    		
    		
    	}
    }
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f9fd5a3f-703c-407f-9eb2-6992ff8a4f85/Untitled.png)
    

추상 메소드 받을 Poem 인터페이스

- poem.java
    
    ```java
    package wiring.bean;
    
    public interface Poem {
    	// 추상 메소드 생성
    	public void recite();
    }
    ```
    
- flower.java
    
    ```java
    package wiring.bean;
    
    public class Flower implements Poem { //poem을 상속받음
    	String str = "내가 그의 이름을 불러주기 전에는\r\n" + 
    			"그는 다만\r\n" + 
    			"하나의 몸짓에 지나지 않았다.\r\n"; // 문자를 붙여넣으면 자동으로 칸이 떨어짐
    	public void recite() {
    		System.out.println("Flower : " + str); // flower의 str 출력
    	}
    
    }
    ```
    
- flower와 비교를 위한 picnic 클래스파일 생성
    
    ```java
    package wiring.bean;
    
    public class Picnic implements Poem { // poem 상속
    	private String str = "나 하늘로 돌아가리라.\r\n" + 
    			"\r\n" + 
    			"새벽빛 와 닿으면 스러지는\r\n" + 
    			"\r\n" + 
    			"이슬 더불어 손에 손을잡고,";
    	public void recite() {
    		System.out.println("Picnic : " + str);
    	}
    
    }
    ```
    

## 시낭송 인터페이스

- 저글링을 하면서 시 낭송을 해줌
- 객체 주입레퍼런스
- PoeticJuggler.java 파일 생성
    
    ```java
    package wiring.bean;
    
    public class PoeticJuggler extends Juggler { // Juggler를 상속, Juggler역시 Performer를 상속해야하기에 생성 해줌
    	private Poem poem;
    	public PoeticJuggler() {}
    	public PoeticJuggler(int beanBags, Poem poem) { // beanBags는 부모에게 빌려옴
    		super(beanBags); // 부모쪽 생성자로 던져라 라는 super, 빈백받아주는 생성자 호출
    		// 변수생성
    		this.poem = poem; // 자기가 처리
    	}
    	
    	public void perform() throws PerformanceException {
    		super.perform(); // 부모쪽 perform을 불러옴
    		poem.recite(); // 호출시 str출력
    	}
    }
    ```
    
- ApplicationContext.xml
    
    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <!-- 빈들(객체들) -->
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:p="http://www.springframework.org/schema/p"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">		
    	
    	
    	<!-- DI -->
    	<bean id="lee" class="wiring.bean.Juggler"/> <!-- 객체생성, 경로를 다 주어야함, bean에있는 Juggler에 Lee라고 만들겠다. -->
    		
    	<!-- 생성자 wiring -->
    	<bean id="park" class="wiring.bean.Juggler">
    		<constructor-arg value="5"/> <!-- 생성자를 통해 value가 5로 들어감 -->
    	</bean>
    	
    	<!-- 객체 생성 , 생성자 wiring -->
    	<bean id="flower" class="wiring.bean.Flower"/> <!-- 둘중에 하나만 넣어줌 -->
    	<bean id="picnic" class="wiring.bean.Picnic"/>
    	<bean id="hong" class="wiring.bean.PoeticJuggler">
    		<constructor-arg value="7"/> <!-- 정수값을 넘겨줌 -->
    		<constructor-arg ref="flower"/> <!-- 객체를 넘겨줌, poem을 상속받은 것을넣어줌 hello, bounce을 넘기려면 객체를 만들어서 넘겨야함-->
    	</bean>
    	
    </beans>
    ```
    

- BeanWiring.java
    
    ```java
    package wiring.bean;
    
    import org.springframework.context.ApplicationContext;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    
    public class BeanWiringTest {
    	// 실행을 하려는 클래스
    	// 매인이 있어야함
    	public static void main(String[] args) throws PerformanceException{
    		// applicationcontext.xml 파일이 필요함
    		// applicationcontext.xml 을 패키지에 넣어줌
    		// Performer 인터페이스를 생성할것(패키지 안)
    		
    		
    		// 강한결합 - 바꿀 수 없는 결합
    //		Juggler kim = new Juggler(); //생성자가 default라 값넣지말자
    //		kim.perform(); // 예외를 던져줘야함
    		
    		// 무대는 하나지만 공연자는 여러명이라 갈아끼울수 있도록
    		// 공연자들이 계속 바뀌어야함
    		// 참조변수도 juggler 인스턴스도 juggler이기에 갈아끼울 수없음
    		
    		// 해결을위해 느슨한결합을 해주어야함
    		// 느슨한결합 - 바꾸기 편하게 느슨한 결합을 위한 인터페이스를 끼워넣음
    //		Performer hong = new Juggler(); // 계속 바꿀 수 있음 자식클레스에 아무거나 넣어도 됨
    //		hong.perform();
    		// 무대 하나를 여러명이 돌려씀
    		// 자바로는 여기까지 밖에 못함
    		// 갈아끼울라면 자바소스를 코딩해서 건드려야함
    		// 갈아끼울 수 있긴하지만 코드를 수정해야해서 DI를 사용함
    		
    		// DI - 종속 객체 주입
    		// applicationCintext
    		// 객체 만드는 법이 달라짐
    		// 찾아서 써야함 - 컨테이너가 관리해줌
    		ApplicationContext ctx = new ClassPathXmlApplicationContext("/wiring/bean/ApplicationContext.xml"); 
    			// applicationcontext 객체 생성, new 해서 이렇게 생성
    			// 경로설정을 해줌
    			// /wiring/bean/ApplicationContext.xml 을 읽어와라 라는 뜻
    			// 에러가 없어야 제대로 작동
    		// Performer lee = (Performer) ctx.getBean("lee"); // lee를 찾아씀, 형변환 해주어야함
    //		Performer lee = (Performer) ctx.getBean("park"); // applicationcontext에서 만든 생성자에서 5를 받아옴
    //		lee.perform();
    		
    		
    		Performer hong = (Performer) ctx.getBean("hong");
    		hong.perform();
    		
    		
    	}
    }
    ```
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/203df75d-bc33-49f2-b3c1-126f31c6f73f/Untitled.png)
    

---

## 

- song 인터페이스 생성
    
    ```java
    package wiring.bean;
    
    public interface Song {
    	// 재정의 하라
    	public void singing(); // 상속받을 메소드를 만들어줌
    }
    ```
    

- Hello.java
    
    ```java
    package wiring.bean;
    
    public class Hello implements Song {
    	private String str = "아메리카노보단 라떼를\r\n" + 
    			"맛있게 내리던 네 집 앞 카페를\r\n" + 
    			"매일 같이 갔었었던 그때를\r\n" + 
    			"내려줄 게 쓰지 않아 이제는";
    	public void singing() {
    		System.out.println("Hello : " + str);
    	}
    }
    ```
    
- Bounce.java
    
    ```java
    package wiring.bean;
    
    public class Bounce implements Song{
    	private String str = "그대가 돌아서면 두 눈이 마주칠까\r\n" + 
    			"심장이 bounce bounce 두근대\r\n" + 
    			"들릴까 봐 겁나";
    	public void singing() {
    		System.out.println("Bounce : " + str);
    	}
    }
    ```
    
- singer.java
    
    ```java
    package wiring.bean;
    
    public class Singer implements Performer {
    	private String name;
    	private Song song;
    	
    	// 부모한태서 상속을 받아오는것이 없기 때문에 따로 생성을 해줄 필요가 없음 
    	public Singer() {}
    	public Singer(Song song, String name) {
    		this.song = song;
    		this.name = name;
    	}
    	
    	public void perform() throws PerformanceException{ // 재정의 후 예외를 던짐
    		song.singing();
    	}
    
    }
    ```
    
    - performer를 상속받는 가수 클래스
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e1389fe0-dc9a-42c1-8cf4-a9584fc895bf/Untitled.png)
